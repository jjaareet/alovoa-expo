diff --git a/node_modules/@expo/cli/build/src/prebuild/clearNativeFolder.js b/node_modules/@expo/cli/build/src/prebuild/clearNativeFolder.js
index 37960a5..c0424b8 100644
--- a/node_modules/@expo/cli/build/src/prebuild/clearNativeFolder.js
+++ b/node_modules/@expo/cli/build/src/prebuild/clearNativeFolder.js
@@ -106,6 +106,7 @@ async function clearNativeFolder(projectRoot, folders) {
     }
 }
 async function hasRequiredAndroidFilesAsync(projectRoot) {
+    console.log('hasRequiredAndroidFilesAsync', {projectRoot})
     try {
         await Promise.all([
             _configPlugins().AndroidConfig.Paths.getAppBuildGradleAsync(projectRoot),
@@ -113,20 +114,25 @@ async function hasRequiredAndroidFilesAsync(projectRoot) {
             _configPlugins().AndroidConfig.Paths.getAndroidManifestAsync(projectRoot),
             _configPlugins().AndroidConfig.Paths.getMainApplicationAsync(projectRoot), 
         ]);
+        console.log(true)
         return true;
-    } catch  {
+    } catch(error) {
+        console.log({error});
         return false;
     }
 }
 async function hasRequiredIOSFilesAsync(projectRoot) {
+    console.log('hasRequiredIOSFilesAsync', {projectRoot})
     try {
         // If any of the following required files are missing, then the project is malformed.
         await Promise.all([
             _configPlugins().IOSConfig.Paths.getAllXcodeProjectPaths(projectRoot),
             _configPlugins().IOSConfig.Paths.getAllPBXProjectPaths(projectRoot), 
         ]);
+        console.log(true)
         return true;
-    } catch  {
+    } catch(error) {
+        console.log({error});
         return false;
     }
 }
@@ -163,7 +169,9 @@ async function getMalformedNativeProjectsAsync(projectRoot, platforms) {
     }))).filter(Boolean);
 }
 async function promptToClearMalformedNativeProjectsAsync(projectRoot, checkPlatforms) {
+    console.log('promptToClearMalformedNativeProjectsAsync', {projectRoot, checkPlatforms})
     const platforms = await getMalformedNativeProjectsAsync(projectRoot, checkPlatforms);
+    console.log('getMalformedNativeProjectsAsync', {platforms})
     if (!platforms.length) {
         return;
     }
